{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ReviveMC74 Project As the community has grown, I've noticed that there really isn't a centralized location for all the information we've gathered together. What I want to accomplish with this documentation is a full start-to-finish guide for all-things ReviveMC74. Including potential issues, solutions, and etc.","title":"Home"},{"location":"#revivemc74-project","text":"As the community has grown, I've noticed that there really isn't a centralized location for all the information we've gathered together. What I want to accomplish with this documentation is a full start-to-finish guide for all-things ReviveMC74. Including potential issues, solutions, and etc.","title":"ReviveMC74 Project"},{"location":"background/","text":"Some background information for the uninitiated Incase you don't know much about the Meraki MC74, I'll be covering some background on the phone regarding it's lifespan, history, and etc. If you're already up to speed, or you just don't care, you can skip to configuration . What's in the box? Yes, I shamelessly stole these images from Cisco Meraki's blog , where else would I find them? A typical in-box unit came with the following; This one too! One of my favorite images they took, personally! Usually including the device, handset, wall-mount bracket, screws, flat-style ethernet cable, cleaning cloth, and warranty / information regarding setup. Note, that typically on eBay, units do not come in box. I got extremely lucky with my first unit as it came with it's original box, mounting hardware, etc. On the back of the unit, there are two ports; One indiciating the connection to your PC in a pass-through configuration. And Another, indicating a LAN connection (PoE-input if your setup supports it.) The device runs Android 4.2.3, Jellybean under the hood. Little old, but still runs great on the hardware for it's age! What was the original usage / usecase? Before Cisco Meraki decided to end support for the MC74, it was cloud managed via their MDM portal. Overall, setup was pretty painless, plug it in, provision and off to the races. Nothing special here. The dialer, device settings, and etc. were all within their in-house application. \"Escaping\" from this application was practically impossible. Everything was configured from within the app, so there was no reason to leave it to go to system settings, or any other application. Well, what happened? After their attempt to break market, Cisco Meraki found their product to be \"not good enough\" and pulled it from their device catalog and ended support. Not entirely sure why, but that pretty much sealed the deal on the product. They originally sold for over $500/unit. Which was a bit pricy, and probably didn't help sales. Now you can find them on eBay for like $20 a unit, now that's more my speed. That brings us to now, where we needed a solution to continue using these phones. From this point, they were pretty much paperweights! No management portal means no means of provisioning!","title":"Background Info"},{"location":"background/#some-background-information-for-the-uninitiated","text":"Incase you don't know much about the Meraki MC74, I'll be covering some background on the phone regarding it's lifespan, history, and etc. If you're already up to speed, or you just don't care, you can skip to configuration .","title":"Some background information for the uninitiated"},{"location":"background/#whats-in-the-box","text":"Yes, I shamelessly stole these images from Cisco Meraki's blog , where else would I find them? A typical in-box unit came with the following; This one too! One of my favorite images they took, personally! Usually including the device, handset, wall-mount bracket, screws, flat-style ethernet cable, cleaning cloth, and warranty / information regarding setup. Note, that typically on eBay, units do not come in box. I got extremely lucky with my first unit as it came with it's original box, mounting hardware, etc. On the back of the unit, there are two ports; One indiciating the connection to your PC in a pass-through configuration. And Another, indicating a LAN connection (PoE-input if your setup supports it.) The device runs Android 4.2.3, Jellybean under the hood. Little old, but still runs great on the hardware for it's age!","title":"What's in the box?"},{"location":"background/#what-was-the-original-usage-usecase","text":"Before Cisco Meraki decided to end support for the MC74, it was cloud managed via their MDM portal. Overall, setup was pretty painless, plug it in, provision and off to the races. Nothing special here. The dialer, device settings, and etc. were all within their in-house application. \"Escaping\" from this application was practically impossible. Everything was configured from within the app, so there was no reason to leave it to go to system settings, or any other application.","title":"What was the original usage / usecase?"},{"location":"background/#well-what-happened","text":"After their attempt to break market, Cisco Meraki found their product to be \"not good enough\" and pulled it from their device catalog and ended support. Not entirely sure why, but that pretty much sealed the deal on the product. They originally sold for over $500/unit. Which was a bit pricy, and probably didn't help sales. Now you can find them on eBay for like $20 a unit, now that's more my speed. That brings us to now, where we needed a solution to continue using these phones. From this point, they were pretty much paperweights! No management portal means no means of provisioning!","title":"Well, what happened?"},{"location":"config/","text":"Configuration of wPhone (LinPhone) for various SIP/PBX systems So, you've got a modded phone, now what? You've opened up a multitude of possibilities for your shiny new Meraki-MC74 by successfully getting here! There's so many options to focus on, but primarily, I'm going to focus on configuring the wPhone (LinPhone) application for communication with a SIP/PBX server. Configuring wPhone to communicate with a 3CX SIP server: Now, I understand that not everyone uses 3CX but I prefer it over most other SIP / PBX servers as it's easy to configure and the license is pretty much free to use. Open the wPhone application. It should present you with an assisted menu to put your credentials into. Your credentials are translated as presented below: Username: Extension (001) Password: Extension Password (NOT YOUR 3CX PASSWORD) Domain: Your 3CX domain ({yourname}.3cx.us, 192.168.1.x, voip.phoenix.lab) Display Name: Optional, but looks nice in the side-bar as a title. Transport: TCP (Or TLS if you have that configured.) Now, it won't work out of the box, because 3CX is special, so hit the hamburger button in the upper-left corner and tap your display name. It should open a menu titled SIP ACCOUNT . On the right, under Auth userid put your extension username. Under Proxy add your SIP port after your domain so it looks something like: Under Prefix remove the prefix, otherwise it'll try to dial with a +1 on everything. Switch to the Call tab. Configure a ringtone, or don't. I don't care. Switch to the Audio tab. Go ham, turn on all the codecs. In 3CX, under the extension, and under Phone Provisioning scroll to the bottom and look under codecs. Click Add codecs and add them all. On the phone again, press the dialpad button and tap the status indicator next to the hamburger icon, this instructs it to attempt to connect. It should connect if your setup matches mine. Congratulations! Configuring wPhone with a Asterisk SIP/PBX server: I don't have one of these, but I'm sure one of you out there do, so please message me with further information. I'll add it once I get a confirmed setup!","title":"Configuration"},{"location":"config/#configuration-of-wphone-linphone-for-various-sippbx-systems","text":"","title":"Configuration of wPhone (LinPhone) for various SIP/PBX systems"},{"location":"config/#so-youve-got-a-modded-phone-now-what","text":"You've opened up a multitude of possibilities for your shiny new Meraki-MC74 by successfully getting here! There's so many options to focus on, but primarily, I'm going to focus on configuring the wPhone (LinPhone) application for communication with a SIP/PBX server.","title":"So, you've got a modded phone, now what?"},{"location":"config/#configuring-wphone-to-communicate-with-a-3cx-sip-server","text":"Now, I understand that not everyone uses 3CX but I prefer it over most other SIP / PBX servers as it's easy to configure and the license is pretty much free to use. Open the wPhone application. It should present you with an assisted menu to put your credentials into. Your credentials are translated as presented below: Username: Extension (001) Password: Extension Password (NOT YOUR 3CX PASSWORD) Domain: Your 3CX domain ({yourname}.3cx.us, 192.168.1.x, voip.phoenix.lab) Display Name: Optional, but looks nice in the side-bar as a title. Transport: TCP (Or TLS if you have that configured.) Now, it won't work out of the box, because 3CX is special, so hit the hamburger button in the upper-left corner and tap your display name. It should open a menu titled SIP ACCOUNT . On the right, under Auth userid put your extension username. Under Proxy add your SIP port after your domain so it looks something like: Under Prefix remove the prefix, otherwise it'll try to dial with a +1 on everything. Switch to the Call tab. Configure a ringtone, or don't. I don't care. Switch to the Audio tab. Go ham, turn on all the codecs. In 3CX, under the extension, and under Phone Provisioning scroll to the bottom and look under codecs. Click Add codecs and add them all. On the phone again, press the dialpad button and tap the status indicator next to the hamburger icon, this instructs it to attempt to connect. It should connect if your setup matches mine. Congratulations!","title":"Configuring wPhone to communicate with a 3CX SIP server:"},{"location":"config/#configuring-wphone-with-a-asterisk-sippbx-server","text":"I don't have one of these, but I'm sure one of you out there do, so please message me with further information. I'll add it once I get a confirmed setup!","title":"Configuring wPhone with a Asterisk SIP/PBX server:"},{"location":"contact/","text":"Now, all of this is great and all, but who are you? Well, I put this page in to answer those questions, since I'm sure you're wondering. No, I did NOT develop the script, or any of the associated applications. And I DO NOT want to claim the fame. Instead, I wrote a wonderful guide for those who get stuck, or want a set of thoroughly-detailed instructions for performing the modification to their phone(s). I also contributed by providing QA/testing on the process, as I own two MC74 unit(s) and could provide testing. This also unearthed that there are two different variants of the phones which lead to further developments in the project. I also started the community on Reddit , which started my involvement in the project. The only reaason that I believe that I'm on the Github as a contributor is because I contributed to the community aspect of ReviveMC74. I love the project, as it provides an outlet for me to learn new things. It's taught me deep ADB commands, Python, Markdown, how to manage a subreddit, and much more. I personally took the time to QA / test, break, experiment and write this, and the other guides on the subreddit. My name's Jacob, and I'm from Saint Louis, Missouri. I'm a graduate from Ranken Technical College with a degree in Networking Systems Management, and I'm currently working as a Desktop Specialist. You can visit my blog to learn more about my personal ventures, as this is really only one small piece of my larger puzzle.","title":"Contact"},{"location":"contact/#now-all-of-this-is-great-and-all-but-who-are-you","text":"Well, I put this page in to answer those questions, since I'm sure you're wondering. No, I did NOT develop the script, or any of the associated applications. And I DO NOT want to claim the fame. Instead, I wrote a wonderful guide for those who get stuck, or want a set of thoroughly-detailed instructions for performing the modification to their phone(s). I also contributed by providing QA/testing on the process, as I own two MC74 unit(s) and could provide testing. This also unearthed that there are two different variants of the phones which lead to further developments in the project. I also started the community on Reddit , which started my involvement in the project. The only reaason that I believe that I'm on the Github as a contributor is because I contributed to the community aspect of ReviveMC74. I love the project, as it provides an outlet for me to learn new things. It's taught me deep ADB commands, Python, Markdown, how to manage a subreddit, and much more. I personally took the time to QA / test, break, experiment and write this, and the other guides on the subreddit. My name's Jacob, and I'm from Saint Louis, Missouri. I'm a graduate from Ranken Technical College with a degree in Networking Systems Management, and I'm currently working as a Desktop Specialist. You can visit my blog to learn more about my personal ventures, as this is really only one small piece of my larger puzzle.","title":"Now, all of this is great and all, but who are you?"},{"location":"customization/","text":"Time to make your phone look pretty! After doing all of that work, I'm sure you're dying to know if you can set custom ringtones, backgrounds, etc. Well, the answer is yes, absolutely! After completing intial configuration, (i.e. Connecting to a SIP/PBX server, ensuring phonecalls can be recieved and made, etc.) you can further customize and brand your phone in the following ways: You can change the ringtone to be any .ogg file, just use an online converter to convert it! You can change the background on the dialer, as well as the clock to be whatever you want. You can change the timeout before the phone transitions to clock-mode, and idle/sleep mode. Changing the ringtone To change the ringtone, perform the following steps; Ensure your ringtone of choice is in the .ogg file format, as other formats are untested. If your ringtone is not in the .ogg file format, you can convert it using a tool, like this one . Establish an ADB connection to your phone, note that the location we will be using to store your ringtone will be /sdcard/ssm/audio/ . Copy your desired ringtone from your PC to your phone using the following command: adb shell push /path/to/ringtone.ogg /sdcard/ssm/audio/ringtone.ogg Pull the configuration file from the phone using the following command: adb shell pull /sdcard/ssm/store/MC74.mp C:/path/to/desired/location/MC74.mp . Now's a great time to remove the old MC74.nob if you've previously modified your phone and you're updating / now customizing. Run: adb shell rm /sdcard/ssm/store/MC74.nob Open up your text editor of choice, and locate the line that says ringtone: '/system/media/audio/ringtones/Trad.ogg' and change it to ringtone: '/sdcard/ssm/audio/yourringtone.ogg' Now push it back to the phone: adb shell push C:/path/to/desired/location/MC74.mp /sdcard/ssm/store/MC74.mp . Reboot your phone, or force-close and reopen wPhone from your home menu. Your changes should now be applied. Changing the wallpaper To change the wallpaper behind the dialer, perform the following steps; Ensure your wallpaper is in 16:9 and at least 720p (1280x720). Establish an ADB connection to your phone, note that the location we will be using to store your wallpaper will be /sdcard/ssm/image/ Copy your desired wallpaper from your PC to your phone using the following command: adb shell push /path/to/wallpaper.png /sdcard/ssm/image/wallpaper.png Pull the configuration file from the phone using the following command: adb shell pull /sdcard/ssm/store/MC74.mp C:/path/to/desired/location/MC74.mp Open up your text editor of choice, and locate the line that says bg: 'whiteSlate.jpg' Change that to bg: 'wallpaper.png' Note: To also change the wallpaper on the clock, find img: \"row.jpg\" under screensaver: and change it out with img: \"wallpaper.png\" Push the configuration file from your PC to your phone using the following command: adb shell push C:/path/to/desired/location/MC74.mp /sdcard/ssm/store/MC74.mp Reboot your phone, or force-close and reopen wPhone from your home menu. Your changes should now be applied. Changing the clock/sleep timers To change the clock/sleep timers, perform the following steps; Establish an ADB connection to your phone. Pull the configuration file from the phone using the following command: adb shell pull /sdcard/ssm/store/MC74.mp C:/path/to/desired/location/MC74.mp Open up your text editor of choice, and locate the line(s) that say lightSleep: '600' and deepSleep: '1200' Change them as desired, I personally recommend 10 minutes (600) lightSleep, and 60 minutes (3600) deepSleep. Push the configuration file to the phone using the following command: adb shell push C:/path/to/desired/location/MC74.mp /sdcard/ssm/store/MC74.mp Reboot your phone, or force-close and reopen wPhone from your home menu. Your changes should now be applied.","title":"Customization"},{"location":"customization/#time-to-make-your-phone-look-pretty","text":"After doing all of that work, I'm sure you're dying to know if you can set custom ringtones, backgrounds, etc. Well, the answer is yes, absolutely! After completing intial configuration, (i.e. Connecting to a SIP/PBX server, ensuring phonecalls can be recieved and made, etc.) you can further customize and brand your phone in the following ways: You can change the ringtone to be any .ogg file, just use an online converter to convert it! You can change the background on the dialer, as well as the clock to be whatever you want. You can change the timeout before the phone transitions to clock-mode, and idle/sleep mode.","title":"Time to make your phone look pretty!"},{"location":"customization/#changing-the-ringtone","text":"To change the ringtone, perform the following steps; Ensure your ringtone of choice is in the .ogg file format, as other formats are untested. If your ringtone is not in the .ogg file format, you can convert it using a tool, like this one . Establish an ADB connection to your phone, note that the location we will be using to store your ringtone will be /sdcard/ssm/audio/ . Copy your desired ringtone from your PC to your phone using the following command: adb shell push /path/to/ringtone.ogg /sdcard/ssm/audio/ringtone.ogg Pull the configuration file from the phone using the following command: adb shell pull /sdcard/ssm/store/MC74.mp C:/path/to/desired/location/MC74.mp . Now's a great time to remove the old MC74.nob if you've previously modified your phone and you're updating / now customizing. Run: adb shell rm /sdcard/ssm/store/MC74.nob Open up your text editor of choice, and locate the line that says ringtone: '/system/media/audio/ringtones/Trad.ogg' and change it to ringtone: '/sdcard/ssm/audio/yourringtone.ogg' Now push it back to the phone: adb shell push C:/path/to/desired/location/MC74.mp /sdcard/ssm/store/MC74.mp . Reboot your phone, or force-close and reopen wPhone from your home menu. Your changes should now be applied.","title":"Changing the ringtone"},{"location":"customization/#changing-the-wallpaper","text":"To change the wallpaper behind the dialer, perform the following steps; Ensure your wallpaper is in 16:9 and at least 720p (1280x720). Establish an ADB connection to your phone, note that the location we will be using to store your wallpaper will be /sdcard/ssm/image/ Copy your desired wallpaper from your PC to your phone using the following command: adb shell push /path/to/wallpaper.png /sdcard/ssm/image/wallpaper.png Pull the configuration file from the phone using the following command: adb shell pull /sdcard/ssm/store/MC74.mp C:/path/to/desired/location/MC74.mp Open up your text editor of choice, and locate the line that says bg: 'whiteSlate.jpg' Change that to bg: 'wallpaper.png' Note: To also change the wallpaper on the clock, find img: \"row.jpg\" under screensaver: and change it out with img: \"wallpaper.png\" Push the configuration file from your PC to your phone using the following command: adb shell push C:/path/to/desired/location/MC74.mp /sdcard/ssm/store/MC74.mp Reboot your phone, or force-close and reopen wPhone from your home menu. Your changes should now be applied.","title":"Changing the wallpaper"},{"location":"customization/#changing-the-clocksleep-timers","text":"To change the clock/sleep timers, perform the following steps; Establish an ADB connection to your phone. Pull the configuration file from the phone using the following command: adb shell pull /sdcard/ssm/store/MC74.mp C:/path/to/desired/location/MC74.mp Open up your text editor of choice, and locate the line(s) that say lightSleep: '600' and deepSleep: '1200' Change them as desired, I personally recommend 10 minutes (600) lightSleep, and 60 minutes (3600) deepSleep. Push the configuration file to the phone using the following command: adb shell push C:/path/to/desired/location/MC74.mp /sdcard/ssm/store/MC74.mp Reboot your phone, or force-close and reopen wPhone from your home menu. Your changes should now be applied.","title":"Changing the clock/sleep timers"},{"location":"extras/","text":"Some extra additional modifications for ease of use, etc. Now for the fun little tid-bits that I added to my phone for some added flare Installing Discord, because, why not? I wondered, like most of you are, if you can make this thing a \"Discord Phone\" because everyone needs one of those, right? OF COURSE YOU CAN! It's a bit insecure since it's an older build of Discord, but it works! To install, perform the following: Ensure the phone is connected to your PC via USB. Ensure you have ADB access to your phone. Download the following APK from APKMirror, this is the only version, and highest version compatible to-date. Install by running the following via adb: adb install {path/to/apk} Open, sign in, and voila, Discord Phone. Installing Tasker to automate quiet time Let's say, you're sleeping, and some douchebag decides to call you at 2AM on your SIP number. (Totally not me, I setup after-hours rules.) There's a way to silence the phone for off-hours. Especially useful if you don't have a PBX and have your phone setup right to your SIP provider. Preparations: Ensure the phone is connected to your PC via USB. Ensure you have ADB access to your phone. Download the following APK from APKMirror, we will be using Tasker. Install by running the following via adb: adb install {path/to/apk} Open Tasker. Make a new profile by pressing the + icon in the middle. Press Time . Set your range for when you want the phone to be muted. Go back. (Upper Left Hand Corner) Press New Task . Type in a name, Silence . Add an action by pressing the + icon in the middle. Under Audio select Silent Mode . Toggle the state to On . Go back, and repeat steps 6 through 14 but respectively for a Audible profile. Ta-da, automated sound profiles for when you're sleeping and working! Softkeys, because physical buttons blow. Ensure the phone is connected to your PC via USB. Ensure you have ADB access to your phone. Download the following APK from Github, we will be using SoftKeys2. Install by running the following via adb: adb install {path/to/apk} Open the application, and follow the on-screen prompts. I Personally recommend putting them to the right and shrinking the bar to be about the size mine is in the Discord photo above. Bam, no more using commands to access the home button!","title":"Extras"},{"location":"extras/#some-extra-additional-modifications-for-ease-of-use-etc","text":"Now for the fun little tid-bits that I added to my phone for some added flare","title":"Some extra additional modifications for ease of use, etc."},{"location":"extras/#installing-discord-because-why-not","text":"I wondered, like most of you are, if you can make this thing a \"Discord Phone\" because everyone needs one of those, right? OF COURSE YOU CAN! It's a bit insecure since it's an older build of Discord, but it works! To install, perform the following: Ensure the phone is connected to your PC via USB. Ensure you have ADB access to your phone. Download the following APK from APKMirror, this is the only version, and highest version compatible to-date. Install by running the following via adb: adb install {path/to/apk} Open, sign in, and voila, Discord Phone.","title":"Installing Discord, because, why not?"},{"location":"extras/#installing-tasker-to-automate-quiet-time","text":"Let's say, you're sleeping, and some douchebag decides to call you at 2AM on your SIP number. (Totally not me, I setup after-hours rules.) There's a way to silence the phone for off-hours. Especially useful if you don't have a PBX and have your phone setup right to your SIP provider. Preparations: Ensure the phone is connected to your PC via USB. Ensure you have ADB access to your phone. Download the following APK from APKMirror, we will be using Tasker. Install by running the following via adb: adb install {path/to/apk} Open Tasker. Make a new profile by pressing the + icon in the middle. Press Time . Set your range for when you want the phone to be muted. Go back. (Upper Left Hand Corner) Press New Task . Type in a name, Silence . Add an action by pressing the + icon in the middle. Under Audio select Silent Mode . Toggle the state to On . Go back, and repeat steps 6 through 14 but respectively for a Audible profile. Ta-da, automated sound profiles for when you're sleeping and working!","title":"Installing Tasker to automate quiet time"},{"location":"extras/#softkeys-because-physical-buttons-blow","text":"Ensure the phone is connected to your PC via USB. Ensure you have ADB access to your phone. Download the following APK from Github, we will be using SoftKeys2. Install by running the following via adb: adb install {path/to/apk} Open the application, and follow the on-screen prompts. I Personally recommend putting them to the right and shrinking the bar to be about the size mine is in the Discord photo above. Bam, no more using commands to access the home button!","title":"Softkeys, because physical buttons blow."},{"location":"setup/","text":"Inital Setup Well, we have to start somewhere right? Let's start with the basics What do you need? A copy of the repository in a local directory: git clone https://github.com/reviveMC74/reviveMC74.git cd reviveMC74 A USB-A <-> USB-A cable (Amazon) A Meraki MC74 Cloud Phone (A-duh, that's why you're here) A way to power the phone, either via PoE (Power over Ethernet) or 12v adapter A computer with Python3 installed, preferibly Python27 for compatability reasons I Personally recommend installing Debian in a VM and passing the ADB interface through to it. I've found it easier to get the dependancies listed in the installer this way. The directions to get a VM with Debian running are outside the scope of this guide, but you can google it. The dependancies listed in the installer: UNPACKBOOTIMG/MKBOOTIMG/CPIO/CHMOD GZIP/GUNZIP Extract usr/local/wbin/gunzip.exe and usr/local/wbin/gzip.exe from that download and place in a PATH directory. A reasonable amount of experience with ADB (Android Debug Bridge) Preparing the phone After you've gathered the required components / software, you need to perform the following to get started: These steps put the phone into fastboot, allowing you to flash a custom recovery. Remove the USB cable from the side of the MC74 (If you've already connected it previously.) Remove the ethernet/PoE cable from the LAN port on the back of the MC74 Reconnect the USB cable to the right-side USB port of the MC74 (Not the back) and the other end to your PC Before you move onto the next step, be prepared to do the following after continuing: Press and hold the mute button (before the backlight flashes) Keep pressing it until the Cisco / Meraki logo appears and the vibrator audibly sounds Apply power with your PoE ethernet cable to the LAN port (It looks like a LAN icon, not the PC icon port.) Release the mute button after step 3-B occurs. If the phone boots like normal, you've done something wrong and must try again. Please return to step 1. Option 1: Running the script Now that the phone is ready, we can finally run the script! BUT, hold your horses, we have a few ways of doing it depending on how you installed Python: From inside the reviveMC74-main directory, type: - C:\\python27\\python.exe revive-Mc74.py - Or python revive-Mc74.py It should run as desired, and give a few more prompts. Just follow them as directed. When finished, you should have a modded MC74! Open the app drawer and tap wPhone and configure as desired. Don't worry if something breaks when running the script, not everyone's phone is built the same, so the script may fail in some places and succeed in others. The following options are for you! Option 2: replaceRecovery Failure Let's say the script failed after flashing recovery and now your phone is just sitting there in CWM, there's a way to manually do the rest of the work. My first phone failed here, and I had to do a bunch of tinkering to the /system partition to get it to allow access to ADB. Let's skip that and flash a pre-built image instead that I built from my phone: Download the following .zip file which is a backup of my /system partition, preconfigured to allow ADB access upon boot, and already has the Meraki dialer pre-uninstalled. From CWM, press install zip from sideload In your ADB shell type adb sideload {directory/to/downloaded/zip} After it pushes and restores, wipe /data and /cache to prevent potential issues. Reboot to system. When it boots, it may look like it's \"bootlooping\" but it should be operational, ensure the device has vibrated as that is an indicator of a successful boot. Then, run the script with the following arguments: python revive-Mc74.py installApps That should install (and uninstall if I missed anything) the custom dialer, led controls, and button redirections. From there, just press and hold the mute button and it should prompt you to pick a home application, choose TeslaLauncher and be sure to hit Always . And finally, from the app drawer run wPhone to get started on setting up your SIP softphone. Again, don't worry if that doesn't work either, there's always an option 3. Option 3: installApps Failure So, you've got CWM flashed to recovery, you've flashed my custom /system backup, or you've managed to get through the script up until this point, and now you're stuck: This is how my second phone failed, and here's how I manually did the work: Ensure you have ADB access to the phone (It's booted, and sitting on the Cisco Meraki screen, or you're on the homescreen.) from the /installFiles subdirectory, run the following: adb install com.teslacoilsw.launcher-4.1.0-41000-minAPI16.apk adb install -t revive.MC74-debug.apk adb install revive.SSMService-debug.apk adb root This may result in a \"hang\" and do absolutely nothing. Don't worry, if this happens, press ctrl-c and then unplug the USB cable from the phone, and plug it back in. Then proceed as normal. adb remount adb push hex /system/bin/hex adb shell chmod 755 /system/bin/hex adb push lights /system/bin/lights adb shell chmod 755 /system/bin/hex From there, you should be able to reboot the phone, and then run an application called wPhone from the launcher drawer.","title":"Setup"},{"location":"setup/#inital-setup","text":"Well, we have to start somewhere right? Let's start with the basics","title":"Inital Setup"},{"location":"setup/#what-do-you-need","text":"A copy of the repository in a local directory: git clone https://github.com/reviveMC74/reviveMC74.git cd reviveMC74 A USB-A <-> USB-A cable (Amazon) A Meraki MC74 Cloud Phone (A-duh, that's why you're here) A way to power the phone, either via PoE (Power over Ethernet) or 12v adapter A computer with Python3 installed, preferibly Python27 for compatability reasons I Personally recommend installing Debian in a VM and passing the ADB interface through to it. I've found it easier to get the dependancies listed in the installer this way. The directions to get a VM with Debian running are outside the scope of this guide, but you can google it. The dependancies listed in the installer: UNPACKBOOTIMG/MKBOOTIMG/CPIO/CHMOD GZIP/GUNZIP Extract usr/local/wbin/gunzip.exe and usr/local/wbin/gzip.exe from that download and place in a PATH directory. A reasonable amount of experience with ADB (Android Debug Bridge)","title":"What do you need?"},{"location":"setup/#preparing-the-phone","text":"After you've gathered the required components / software, you need to perform the following to get started: These steps put the phone into fastboot, allowing you to flash a custom recovery. Remove the USB cable from the side of the MC74 (If you've already connected it previously.) Remove the ethernet/PoE cable from the LAN port on the back of the MC74 Reconnect the USB cable to the right-side USB port of the MC74 (Not the back) and the other end to your PC Before you move onto the next step, be prepared to do the following after continuing: Press and hold the mute button (before the backlight flashes) Keep pressing it until the Cisco / Meraki logo appears and the vibrator audibly sounds Apply power with your PoE ethernet cable to the LAN port (It looks like a LAN icon, not the PC icon port.) Release the mute button after step 3-B occurs. If the phone boots like normal, you've done something wrong and must try again. Please return to step 1.","title":"Preparing the phone"},{"location":"setup/#option-1-running-the-script","text":"Now that the phone is ready, we can finally run the script! BUT, hold your horses, we have a few ways of doing it depending on how you installed Python: From inside the reviveMC74-main directory, type: - C:\\python27\\python.exe revive-Mc74.py - Or python revive-Mc74.py It should run as desired, and give a few more prompts. Just follow them as directed. When finished, you should have a modded MC74! Open the app drawer and tap wPhone and configure as desired. Don't worry if something breaks when running the script, not everyone's phone is built the same, so the script may fail in some places and succeed in others. The following options are for you!","title":"Option 1: Running the script"},{"location":"setup/#option-2-replacerecovery-failure","text":"Let's say the script failed after flashing recovery and now your phone is just sitting there in CWM, there's a way to manually do the rest of the work. My first phone failed here, and I had to do a bunch of tinkering to the /system partition to get it to allow access to ADB. Let's skip that and flash a pre-built image instead that I built from my phone: Download the following .zip file which is a backup of my /system partition, preconfigured to allow ADB access upon boot, and already has the Meraki dialer pre-uninstalled. From CWM, press install zip from sideload In your ADB shell type adb sideload {directory/to/downloaded/zip} After it pushes and restores, wipe /data and /cache to prevent potential issues. Reboot to system. When it boots, it may look like it's \"bootlooping\" but it should be operational, ensure the device has vibrated as that is an indicator of a successful boot. Then, run the script with the following arguments: python revive-Mc74.py installApps That should install (and uninstall if I missed anything) the custom dialer, led controls, and button redirections. From there, just press and hold the mute button and it should prompt you to pick a home application, choose TeslaLauncher and be sure to hit Always . And finally, from the app drawer run wPhone to get started on setting up your SIP softphone. Again, don't worry if that doesn't work either, there's always an option 3.","title":"Option 2: replaceRecovery Failure"},{"location":"setup/#option-3-installapps-failure","text":"So, you've got CWM flashed to recovery, you've flashed my custom /system backup, or you've managed to get through the script up until this point, and now you're stuck: This is how my second phone failed, and here's how I manually did the work: Ensure you have ADB access to the phone (It's booted, and sitting on the Cisco Meraki screen, or you're on the homescreen.) from the /installFiles subdirectory, run the following: adb install com.teslacoilsw.launcher-4.1.0-41000-minAPI16.apk adb install -t revive.MC74-debug.apk adb install revive.SSMService-debug.apk adb root This may result in a \"hang\" and do absolutely nothing. Don't worry, if this happens, press ctrl-c and then unplug the USB cable from the phone, and plug it back in. Then proceed as normal. adb remount adb push hex /system/bin/hex adb shell chmod 755 /system/bin/hex adb push lights /system/bin/lights adb shell chmod 755 /system/bin/hex From there, you should be able to reboot the phone, and then run an application called wPhone from the launcher drawer.","title":"Option 3: installApps Failure"}]}